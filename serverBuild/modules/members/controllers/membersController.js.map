{"version":3,"sources":["../../../../server/modules/members/controllers/membersController.js"],"names":["process","env","SECRET_KEY","SocietyController","registerOwner","req","res","societyModel","then","dbResponse","status","satusCode","json","catch","err","console","log","getDetails","getDetailsUsingQueryParam","params","tableName","columnName","query","value","updatePendingPaymentOfFlat","body","pendingPayment","ownerid","flatid","updatePaymentHistory","resFlag","responseData","reqBody","callback","currentDate","Date","toISOString","registerBuilding","buildingName","societyid","registerSociety","societyName","address","pincode","getOwnerList","societyIds","buildingNames","flatIds","registerFlat","flatName","societyId","deleteRow","columnValue","updateBuilding","updateSociety","updateFlat","updateOwner","SocietyModel"],"mappings":";;;;;;AAAA;;;;;;;;AACAA,QAAQC,GAAR,CAAYC,UAAZ,GAAyB,QAAzB;;IAEMC,iB,GACF,6BAAa;AAAA;;AAAA;;AAAA,SAKbC,aALa,GAKE,UAACC,GAAD,EAAMC,GAAN,EAAa;AACxB,cAAKC,YAAL,CAAkBH,aAAlB,CAAgCC,GAAhC,EAAqCG,IAArC,CAA0C,UAACC,UAAD,EAAc;AACpDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,+BAAZ,EAA4CF,GAA5C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAZY;;AAAA,SAabG,UAba,GAaD,UAACZ,GAAD,EAAMC,GAAN,EAAa;AACrBS,gBAAQC,GAAR,CAAY,2BAAZ;AACA,cAAKT,YAAL,CAAkBU,UAAlB,CAA6BZ,GAA7B,EAAkCG,IAAlC,CAAuC,UAACC,UAAD,EAAc;AACjDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,2BAAZ,EAAwCF,GAAxC;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KArBY;;AAAA,SAsBbI,yBAtBa,GAsBc,UAACb,GAAD,EAAMC,GAAN,EAAa;AACpCS,gBAAQC,GAAR,oBAA6BX,IAAIc,MAAJ,CAAWC,SAAxC,eAA2Df,IAAIc,MAAJ,CAAWE,UAAtE,WAAsFhB,IAAIiB,KAAJ,CAAUC,KAAhG;AACA,cAAKhB,YAAL,CAAkBW,yBAAlB,CAA4Cb,GAA5C,EAAiDG,IAAjD,CAAsD,UAACC,UAAD,EAAc;AAChEH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,0CAAZ,EAAuDF,GAAvD;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KA9BY;;AAAA,SA+BbU,0BA/Ba,GA+Be,UAACnB,GAAD,EAAMC,GAAN,EAAa;AACrCS,gBAAQC,GAAR,yCAAiDX,IAAIoB,IAAJ,CAASC,cAA1D,0BAA4FrB,IAAIoB,IAAJ,CAASE,OAArG,qBAA4HtB,IAAIoB,IAAJ,CAASG,MAArI;AACA,cAAKrB,YAAL,CAAkBiB,0BAAlB,CAA6CnB,GAA7C,EAAkDG,IAAlD,CAAuD,UAACC,UAAD,EAAc;AACjEM,oBAAQC,GAAR,CAAY,gDAAZ;AACA,kBAAKa,oBAAL,CAA0BxB,GAA1B,EAA+B,UAACyB,OAAD,EAAUC,YAAV,EAAyB;AACpD,oBAAGD,OAAH,EAAW;AACPxB,wBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCmB,YAAtC;AACH,iBAFD,MAEO;;AAEHzB,wBAAII,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBmB,YAArB;AACH;AACJ,aAPD;AAQH,SAVD,EAUGlB,KAVH,CAUS,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,2CAAZ,EAAwDF,GAAxD;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SAbD;AAcH,KA/CY;;AAAA,SAiDbe,oBAjDa,GAiDS,UAACG,OAAD,EAASC,QAAT,EAAqB;AACvC,YAAMC,cAAc,IAAIC,IAAJ,EAApB;AACA;AACApB,gBAAQC,GAAR,sFAA+FgB,QAAQP,IAAR,CAAaG,MAA5G,SAAsHI,QAAQP,IAAR,CAAaC,cAAnI,WAAsJQ,YAAYE,WAAZ,EAAtJ,aAAqLF,YAAYE,WAAZ,EAArL,WAAmNJ,QAAQP,IAAR,CAAaE,OAAhO;AACA,cAAKpB,YAAL,CAAkBsB,oBAAlB,CAAuCG,OAAvC,EAAgDxB,IAAhD,CAAqD,UAACC,UAAD,EAAc;AAC/DwB,qBAAS,IAAT,EAAexB,UAAf;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,qCAAZ,EAAkDF,GAAlD;AACAmB,qBAAS,KAAT,EAAgBnB,GAAhB;AACH,SALD;AAMH,KA3DY;;AAAA,SA6DbuB,gBA7Da,GA6DM,UAAChC,GAAD,EAAMC,GAAN,EAAc;AAC7BS,gBAAQC,GAAR,qEACGX,IAAIoB,IAAJ,CAASa,YADZ,WAC6BjC,IAAIoB,IAAJ,CAASc,SADtC;AAEA,cAAKhC,YAAL,CAAkB8B,gBAAlB,CAAmChC,GAAnC,EAAwCG,IAAxC,CAA6C,UAACC,UAAD,EAAc;AACvDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,kCAAZ,EAA+CF,GAA/C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAtEY;;AAAA,SAwEb0B,eAxEa,GAwEK,UAACnC,GAAD,EAAMC,GAAN,EAAc;AAC5BS,gBAAQC,GAAR,oHAEIX,IAAIoB,IAAJ,CAASgB,WAFb,cAE+BpC,IAAIoB,IAAJ,CAASiB,OAFxC,cAEsDrC,IAAIoB,IAAJ,CAASkB,OAF/D;AAGA,cAAKpC,YAAL,CAAkBiC,eAAlB,CAAkCnC,GAAlC,EAAuCG,IAAvC,CAA4C,UAACC,UAAD,EAAc;AACtDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,iCAAZ,EAA8CF,GAA9C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAlFY;;AAAA,SAoFb8B,YApFa,GAoFE,UAACvC,GAAD,EAAMC,GAAN,EAAc;AACzBS,gBAAQC,GAAR,6BAAsCX,IAAIoB,IAAJ,CAASoB,UAA/C,UAA8DxC,IAAIoB,IAAJ,CAASqB,aAAvE,UAAyFzC,IAAIoB,IAAJ,CAASsB,OAAlG;AACA,cAAKxC,YAAL,CAAkBqC,YAAlB,CAA+BvC,GAA/B,EAAoCG,IAApC,CAAyC,UAACC,UAAD,EAAc;AACnDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,8BAAZ,EAA2CF,GAA3C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KA5FY;;AAAA,SA8FbkC,YA9Fa,GA8FE,UAAC3C,GAAD,EAAMC,GAAN,EAAc;AACzBS,gBAAQC,GAAR,oEAA4EX,IAAIoB,IAAJ,CAASwB,QAArF,cAAoG5C,IAAIoB,IAAJ,CAASa,YAA7G,YAA+HjC,IAAIoB,IAAJ,CAASyB,SAAxI;AACA,cAAK3C,YAAL,CAAkByC,YAAlB,CAA+B3C,GAA/B,EAAoCG,IAApC,CAAyC,UAACC,UAAD,EAAc;AACnDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,8BAAZ,EAA2CF,GAA3C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAtGY;;AAAA,SAuGbqC,SAvGa,GAuGD,UAAC9C,GAAD,EAAMC,GAAN,EAAc;AACtBS,gBAAQC,GAAR,kBAA2BX,IAAIoB,IAAJ,CAASL,SAApC,eAAuDf,IAAIoB,IAAJ,CAASJ,UAAhE,WAAgFhB,IAAIoB,IAAJ,CAAS2B,WAAzF;AACA,cAAK7C,YAAL,CAAkB4C,SAAlB,CAA4B9C,GAA5B,EAAiCG,IAAjC,CAAsC,UAACC,UAAD,EAAc;AAChDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,+BAAZ,EAA4CF,GAA5C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KA/GY;;AAAA,SAiHbuC,cAjHa,GAiHI,UAAChD,GAAD,EAAMC,GAAN,EAAc;AAC3BS,gBAAQC,GAAR,qEACGX,IAAIoB,IAAJ,CAASa,YADZ,WAC6BjC,IAAIoB,IAAJ,CAASc,SADtC;AAEA,cAAKhC,YAAL,CAAkB8C,cAAlB,CAAiChD,GAAjC,EAAsCG,IAAtC,CAA2C,UAACC,UAAD,EAAc;AACrDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,gCAAZ,EAA6CF,GAA7C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KA1HY;;AAAA,SA4HbwC,aA5Ha,GA4HG,UAACjD,GAAD,EAAMC,GAAN,EAAc;AAC1BS,gBAAQC,GAAR,oHAEIX,IAAIoB,IAAJ,CAASgB,WAFb,cAE+BpC,IAAIoB,IAAJ,CAASiB,OAFxC,cAEsDrC,IAAIoB,IAAJ,CAASkB,OAF/D;AAGA,cAAKpC,YAAL,CAAkB+C,aAAlB,CAAgCjD,GAAhC,EAAqCG,IAArC,CAA0C,UAACC,UAAD,EAAc;AACpDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,+BAAZ,EAA4CF,GAA5C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAtIY;;AAAA,SAuIbyC,UAvIa,GAuIA,UAAClD,GAAD,EAAMC,GAAN,EAAc;AACvBS,gBAAQC,GAAR,oEAA4EX,IAAIoB,IAAJ,CAASwB,QAArF,cAAoG5C,IAAIoB,IAAJ,CAASa,YAA7G,YAA+HjC,IAAIoB,IAAJ,CAASyB,SAAxI;AACA,cAAK3C,YAAL,CAAkBgD,UAAlB,CAA6BlD,GAA7B,EAAkCG,IAAlC,CAAuC,UAACC,UAAD,EAAc;AACjDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,4BAAZ,EAAyCF,GAAzC;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KA/IY;;AAAA,SAiJb0C,WAjJa,GAiJA,UAACnD,GAAD,EAAMC,GAAN,EAAa;AACtB,cAAKC,YAAL,CAAkBiD,WAAlB,CAA8BnD,GAA9B,EAAmCG,IAAnC,CAAwC,UAACC,UAAD,EAAc;AAClDH,gBAAII,MAAJ,CAAWD,WAAWE,SAAtB,EAAiCC,IAAjC,CAAsCH,UAAtC;AACH,SAFD,EAEGI,KAFH,CAES,UAACC,GAAD,EAAO;AACZC,oBAAQC,GAAR,CAAY,6BAAZ,EAA0CF,GAA1C;AACAR,gBAAII,MAAJ,CAAWI,IAAIH,SAAf,EAA0BC,IAA1B,CAA+BE,GAA/B;AACH,SALD;AAMH,KAxJY;;AACR,SAAKP,YAAL,GAAoB,IAAIkD,sBAAJ,EAApB;AACJ,C;;kBA0JUtD,iB","file":"membersController.js","sourcesContent":["import SocietyModel from '../models/membersModel';\r\nprocess.env.SECRET_KEY = 'varunv';\r\n\r\nclass SocietyController {\r\n    constructor(){\r\n         this.societyModel = new SocietyModel();\r\n    }\r\n\r\n    \r\n    registerOwner= (req, res) =>{\r\n        this.societyModel.registerOwner(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    getDetails= (req, res) =>{\r\n        console.log('checking auto deploye1111');\r\n        this.societyModel.getDetails(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getDetails',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    getDetailsUsingQueryParam= (req, res) =>{\r\n        console.log(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`);\r\n        this.societyModel.getDetailsUsingQueryParam(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getDetailsUsingQueryParam',err);\r\n            res.status(err.satusCode).json(err);\r\n        }); \r\n    }\r\n    updatePendingPaymentOfFlat= (req, res) =>{\r\n        console.log(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`);\r\n        this.societyModel.updatePendingPaymentOfFlat(req).then((dbResponse)=>{\r\n            console.log('updatePendingPaymentOfFlat successfully done!!');\r\n            this.updatePaymentHistory(req, (resFlag, responseData)=>{\r\n                if(resFlag){\r\n                    res.status(dbResponse.satusCode).json(responseData);\r\n                } else {\r\n                    \r\n                    res.status(400).json(responseData);\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            console.log('catch block of updatePendingPaymentOfFlat',err);\r\n            res.status(err.satusCode).json(err);\r\n        }); \r\n    }\r\n\r\n    updatePaymentHistory= (reqBody,callback) =>{\r\n        const currentDate = new Date();\r\n        //console.log(`update paymentHistory set paymentHistory = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`)\r\n        console.log(`insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${reqBody.body.flatid},${reqBody.body.pendingPayment},'${currentDate.toISOString()}','${currentDate.toISOString()}',${reqBody.body.ownerid});`);\r\n        this.societyModel.updatePaymentHistory(reqBody).then((dbResponse)=>{\r\n            callback(true, dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updatePaymentHistory',err);\r\n            callback(false, err);\r\n        }); \r\n    }\r\n\r\n    registerBuilding = (req, res) => {\r\n        console.log(`insert into building(buildingname, societyid) values\r\n        (${req.body.buildingName},'${req.body.societyid}');`);\r\n        this.societyModel.registerBuilding(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerBuilding ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    registerSociety = (req, res) => {\r\n        console.log(`society register query is--- \r\n        insert into society(societyName, address, pincode) values \r\n        ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}'`);\r\n        this.societyModel.registerSociety(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerSociety ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    getOwnerList = (req, res) => {\r\n        console.log(`call get_owner_details(${req.body.societyIds}, ${req.body.buildingNames}, ${req.body.flatIds})`);\r\n        this.societyModel.getOwnerList(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getOwnerList ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    registerFlat = (req, res) => {\r\n        console.log(`insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`);\r\n        this.societyModel.registerFlat(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerFlat ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    deleteRow = (req, res) => {\r\n        console.log(`delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`);\r\n        this.societyModel.deleteRow(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    updateBuilding = (req, res) => {\r\n        console.log(`insert into building(buildingname, societyid) values\r\n        (${req.body.buildingName},'${req.body.societyid}');`);\r\n        this.societyModel.updateBuilding(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updateBuilding ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    updateSociety = (req, res) => {\r\n        console.log(`society register query is--- \r\n        insert into society(societyName, address, pincode) values \r\n        ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}'`);\r\n        this.societyModel.updateSociety(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updateSociety ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    updateFlat = (req, res) => {\r\n        console.log(`insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`);\r\n        this.societyModel.updateFlat(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updateFlat ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    updateOwner= (req, res) =>{\r\n        this.societyModel.updateOwner(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updateOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default SocietyController;"]}